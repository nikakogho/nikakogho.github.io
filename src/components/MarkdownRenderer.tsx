import React from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import remarkWikiLink from 'remark-wiki-link';
import { Link as RouterLink } from 'react-router-dom'; // Use React Router Link for internal navigation
import { normalizeNoteName } from '../utils/markdownHelper';

interface MarkdownRendererProps {
  markdown: string;
  vaultId: string; // Needed to construct correct link paths
}

const MarkdownRenderer: React.FC<MarkdownRendererProps> = ({ markdown, vaultId }) => {

  const wikiLinkResolver = (name: string) => {
    // Basic normalization - match the logic used in NotePage/utils
    return [normalizeNoteName(name)];
  };

  const wikiHrefTemplate = (permalink: string) => {
    // Construct the path for React Router
    return `/vaults/${vaultId}/notes/${permalink}`;
  };

  return (
    <ReactMarkdown
      remarkPlugins={[
        remarkGfm,
        [
          remarkWikiLink,
          {
            pageResolver: wikiLinkResolver,
            hrefTemplate: wikiHrefTemplate,
            wikiLinkClassName: 'internal-link', // Class for styling
            newClassName: 'new-link', // Class for links to non-existent pages (optional)
            // Important: aliasDivider for [[Note|Alias]] syntax
            aliasDivider: '|'
          },
        ],
      ]}
      components={{
        // --- Custom Component Rendering ---

        // Override 'a' tag rendering
        a: ({ node, href, children, ...props }) => {
          if (href && props.className === 'internal-link') {
            // It's an internal wiki-link, render using React Router's Link
            // href already contains the correct path generated by hrefTemplate
            return <RouterLink to={href}>{children}</RouterLink>;
          }
          // It's a standard external link or a non-wiki internal link
          // Render as a normal HTML 'a' tag
          // Open external links in a new tab
          const isExternal = href?.startsWith('http');
          return (
            <a href={href} {...props} target={isExternal ? '_blank' : undefined} rel={isExternal ? 'noopener noreferrer' : undefined}>
              {children}
            </a>
          );
        },

        // Optional: Handle images with relative paths if needed
        // You might need to resolve paths relative to the vault structure
        // img: ({node, ...props}) => {
        //   const imgPath = props.src?.startsWith('/') ? props.src : `/vaults/${vaultId}/${props.src}`;
        //   return <img {...props} src={imgPath} alt={props.alt ?? ''} />;
        // }
      }}
    >
      {markdown}
    </ReactMarkdown>
  );
};

export default MarkdownRenderer;